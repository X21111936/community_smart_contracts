<%- include partials/header.ejs %>

<!doctype html>
<html lang="en">
  <head>
 
    <head>
      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
      <style>
        /* body {
              background-color: rgb(112, 140, 216);
              font-family: tahoma;
              font-size: 33px;
              display: flex;
              flex-direction: row;
          }
          button {
              background-color: rgb(203, 220, 223);
              font-size: 33px;
              padding: 5px;
              font-family: Impact;
          }
          input {
              width: 25vw;
              height: 30px;
              font-size: 25px;
              font-family: tahoma;
              outline: none;
          }
          #readArea {
              flex-basis: 50%;
          }
          #writeArea {
              flex-basis: 50%;
          }
          button:hover {
              background-color: rgb(255, 0, 0);
          }
  
  */
      </style>
  </head>

  </head>
  <body>

    <div class="jumbotron">
      <h1 class="display-4">Midland Wind Energy</h1>
      <p class="lead">Community Smart Contracts</p>
      <hr class="my-4">
      <p></p>
      <p class="lead">
        <a class="btn btn-success btn-lg" href="https://etherscan.io/txs" role="button">Connect to Etherscan</a>
      </p>
    </div>

	<div class="container py-4 py-xl-5">
        <div class="row gy-4 gy-md-0">
            <div class="col-md-6 text-center text-md-start d-flex d-sm-flex d-md-flex justify-content-center align-items-center justify-content-md-start align-items-md-center justify-content-xl-center">
                <div style="max-width: 350px;">
                    <h2 class="text-uppercase fw-bold" >The Value of MWE Tokens</h2>
                    <p class="my-3" style="color: var(--bs-emphasis-color);font-weight: bold;">A tutorial on the use of your recommended digital wallet.</p><a class="btn btn-success btn-lg" role="button" href="https://support.metamask.io/hc/en-us/articles/360015489531-Getting-started-with-MetaMask" >Metamask</a>
                </div>
            </div>
            <div class="col-md-6">
                <div class="p-xl-5 m-xl-5">
                    <section class="clean-block clean-info dark">
                        <div class="container">
                            <div class="videoWrapper"><iframe class="embed-responsive-item" allowfullscreen frameborder="0" src="https://www.youtube.com/embed/-HTubEJ61zU" width="100%" height="auto"></iframe></div>
                        </div>
                    </section>
                </div>
            </div>
        </div>
      

			

    <div id="readArea"> <!-- READING FROM CONTRACT -->
      <button onclick="connectMetamask()">CONNECT TO METAMASK</button>
      <p id="userArea">Status: Not connected to Metamask</p>
       <!-- index html to meta-->

      <button onclick="connectContract()">CONNECT TO CONTRACT</button>
      <p id="contractArea">Status: Not connected to Contract</p>
      <!-- meta to SC -->

      <button onclick="getContractAccount()"> GET CONTRACT ACCOUNT </button>
      <p id="contractAccount">Contract Account: Not Connected to Contract</p>
      <!-- CAlling the function designed in Transactions.sol get deployment addresss -->

      <button onclick="getBalanceApple()">GET BALANCE OF THE CONTRACT</button>
      <p id="balanceArea">Balance: Not Connected to Contract</p>
      <!-- CAlling the function designed in Transactions.sol get balance -->

      
  </div>


      <button onclick="withdraw()">WITHDRAW TOKENS TO ANY ADDRESS</button> <br>
      <input type="text" id="addressInput" placeholder="Enter Address"> <br>
      <input type="number" id="amountInput" placeholder="Enter Amount"> 
              <!-- CAlling the function designed in Transactions.sol -->
      <!-- calling the withdraw function -->
  </div>

  <script> // the below script code is convention in web3 in forming the communication with Web

      let account;
      const connectMetamask = async () => {
          if(window.ethereum !== "undefined") {
              const accounts = await ethereum.request({method: "eth_requestAccounts"});
              account = accounts[0];
              document.getElementById("userArea").innerHTML = `User Account: ${account}`;
          }
      }

      const connectContract = async () => {
          const ABI =[
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

        
          ;
          const Address = "0x6b7a52239Ee72262B589E7B62B6FFD9cEB89e588"; // Taking Address from Remix 
          window.web3 = await new Web3(window.ethereum);
          window.contract = await new window.web3.eth.Contract(ABI, Address);
          document.getElementById("contractArea").innerHTML = "Connected to Contract"; // calling the elementID above

		  
      }

      const getContractAccount = async () => {
          const data = await window.contract.methods.getAddress().call();
          document.getElementById("contractAccount").innerHTML = `Contract Account: ${data}`;
      }

      const getBalanceApple = async () => { // const getBalanceApple is the HTML function & .contract.getBalance is the smart contract function
          const data = await window.contract.methods.getBalance().call();
          document.getElementById("balanceArea").innerHTML = `Contract Balance: ${data}`;
      }

      const depositContract = async () => {
          const amount = document.getElementById("depositInput").value;
          await window.contract.methods.deposit().send({from: account, value: amount});
      }

      const withdraw = async () => {
          const amount = document.getElementById("amountInput").value;
          const address = document.getElementById("addressInput").value;
          await window.contract.methods.withdraw(address, amount).send({from: account});
      }

  </script>
 
</body>
</html>
  </body>
</html>




<%- include partials/footer.ejs %>

