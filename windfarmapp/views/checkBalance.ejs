<%- include partials/header.ejs %>



<style>
    /* Make the image fully responsive */
    
    .carousel-inner img {
      width: 100%;
      height: 25%;
    }
  </style>

<body>

  <div class="jumbotron">
    <h1 class="display-4">Midland Wind Energy</h1>
    <p class="lead">Community Smart Contracts</p>
    <hr class="my-4">
    <p></p>
    <p class="lead">
      <a class="btn btn-success btn-lg" href="/contact" role="button">Contact Us</a>
    </p>
  </div>

  <div id="readArea"> <!-- READING FROM CONTRACT -->
    <button onclick="connectMetamask()">CONNECT TO METAMASK</button>
    <p id="userArea">Status: Not connected to Metamask</p>
     <!-- index html to meta-->

    <button onclick="connectContract()">CONNECT TO CONTRACT</button>
    <p id="contractArea">Status: Not connected to Contract</p>
    <!-- meta to SC -->

    <button onclick="getContractAccount()"> GET CONTRACT ACCOUNT </button>
    <p id="contractAccount">Contract Account: Not Connected to Contract</p>
    <!-- CAlling the function designed in Transactions.sol get deployment addresss -->

    <button onclick="getBalanceApple()">GET BALANCE OF THE CONTRACT</button>
    <p id="balanceArea">Balance: Not Connected to Contract</p>
    <!-- CAlling the function designed in Transactions.sol get balance -->

    
</div>


    <button onclick="withdraw()">WITHDRAW TOKENS TO ANY ADDRESS</button> <br>
    <input type="text" id="addressInput" placeholder="Enter Address"> <br>
    <input type="number" id="amountInput" placeholder="Enter Amount"> 
            <!-- CAlling the function designed in Transactions.sol -->
    <!-- calling the withdraw function -->
</div>

<script> // the below script code is convention in web3 in forming the communication with Web

    let account;
    const connectMetamask = async () => {
        if(window.ethereum !== "undefined") {
            const accounts = await ethereum.request({method: "eth_requestAccounts"});
            account = accounts[0];
            document.getElementById("userArea").innerHTML = `User Account: ${account}`;
        }
    }

    const connectContract = async () => {
        const ABI = [
{
  "anonymous": false,
  "inputs": [
    {
      "indexed": true,
      "internalType": "address",
      "name": "owner",
      "type": "address"
    },
    {
      "indexed": true,
      "internalType": "address",
      "name": "spender",
      "type": "address"
    },
    {
      "indexed": false,
      "internalType": "uint256",
      "name": "value",
      "type": "uint256"
    }
  ],
  "name": "Approval",
  "type": "event"
},
{
  "anonymous": false,
  "inputs": [
    {
      "indexed": true,
      "internalType": "address",
      "name": "from",
      "type": "address"
    },
    {
      "indexed": true,
      "internalType": "address",
      "name": "to",
      "type": "address"
    },
    {
      "indexed": false,
      "internalType": "uint256",
      "name": "value",
      "type": "uint256"
    }
  ],
  "name": "Transfer",
  "type": "event"
},
{
  "inputs": [
    {
      "internalType": "address",
      "name": "owner",
      "type": "address"
    },
    {
      "internalType": "address",
      "name": "spender",
      "type": "address"
    }
  ],
  "name": "allowance",
  "outputs": [
    {
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }
  ],
  "stateMutability": "view",
  "type": "function"
},
{
  "inputs": [
    {
      "internalType": "address",
      "name": "spender",
      "type": "address"
    },
    {
      "internalType": "uint256",
      "name": "amount",
      "type": "uint256"
    }
  ],
  "name": "approve",
  "outputs": [
    {
      "internalType": "bool",
      "name": "",
      "type": "bool"
    }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
},
{
  "inputs": [
    {
      "internalType": "address",
      "name": "account",
      "type": "address"
    }
  ],
  "name": "balanceOf",
  "outputs": [
    {
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }
  ],
  "stateMutability": "view",
  "type": "function"
},
{
  "inputs": [],
  "name": "totalSupply",
  "outputs": [
    {
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }
  ],
  "stateMutability": "view",
  "type": "function"
},
{
  "inputs": [
    {
      "internalType": "address",
      "name": "recipient",
      "type": "address"
    },
    {
      "internalType": "uint256",
      "name": "amount",
      "type": "uint256"
    }
  ],
  "name": "transfer",
  "outputs": [
    {
      "internalType": "bool",
      "name": "",
      "type": "bool"
    }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
},
{
  "inputs": [
    {
      "internalType": "address",
      "name": "sender",
      "type": "address"
    },
    {
      "internalType": "address",
      "name": "recipient",
      "type": "address"
    },
    {
      "internalType": "uint256",
      "name": "amount",
      "type": "uint256"
    }
  ],
  "name": "transferFrom",
  "outputs": [
    {
      "internalType": "bool",
      "name": "",
      "type": "bool"
    }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
}
]

      
        ;
        const Address = "0x976565d86D35cDe293461575c3d2f048f7E2D6A8"; // Taking Address from Remix 
        window.web3 = await new Web3(window.ethereum);
        window.contract = await new window.web3.eth.Contract(ABI, Address);
        document.getElementById("contractArea").innerHTML = "Connected to Contract"; // calling the elementID above
    }

    const getContractAccount = async () => {
        const data = await window.contract.methods.getAddress().call();
        document.getElementById("contractAccount").innerHTML = `Contract Account: ${data}`;
    }

    const getBalanceApple = async () => { // const getBalanceApple is the HTML function & .contract.getBalance is the smart contract function
        const data = await window.contract.methods.getBalance().call();
        document.getElementById("balanceArea").innerHTML = `Contract Balance: ${data}`;
    }

    const depositContract = async () => {
        const amount = document.getElementById("depositInput").value;
        await window.contract.methods.deposit().send({from: account, value: amount});
    }

    const withdraw = async () => {
        const amount = document.getElementById("amountInput").value;
        const address = document.getElementById("addressInput").value;
        await window.contract.methods.withdraw(address, amount).send({from: account});
    }

</script>





<%- include partials/footer.ejs %>